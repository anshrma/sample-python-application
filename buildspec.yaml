---
version: 0.2
env:
  secrets-manager:
    artifactory_username : artifactory-codepipeline-credentials:username
    artifactory_password : artifactory-codepipeline-credentials:password
    artifactory_url : artifactory-codepipeline-credentials:url
phases:
  install:
    runtime-versions:
        docker: 18 
    commands:
      - printenv
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
  pre_build:
      commands:
        - pwd
        - ls -ltr
        - sed -i 's/<USERNAME>/$artifactory_username/g' ./app/requirements.txt 
        - sed -i 's/<PASSWORD>/$artifactory_password/g' ./app/requirements.txt 
        - sed -i 's/<URL>/$artifactory_url/g' app/requirements.txt 
        - cat app/requirements.txt
        - cat /etc/docker/daemon.json
        - cat /etc/sysconfig/docker
  build:
    commands:
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - docker push $REPOSITORY_URI:$TAG
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
      - kubectl apply -f hello-k8s.yml
      - printf '[{"name":"hello-k8s","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json
artifacts:
  files: build.json